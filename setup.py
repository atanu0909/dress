"""
Setup script for Virtual Dress Try-On Application
Helps users configure the Gemini API key securely
"""

import os
import sys

def create_secrets_file():
    """Create secrets.toml file with API key"""
    secrets_dir = ".streamlit"
    secrets_file = os.path.join(secrets_dir, "secrets.toml")
    template_file = os.path.join(secrets_dir, "secrets.toml.template")
    
    # Create .streamlit directory if it doesn't exist
    if not os.path.exists(secrets_dir):
        os.makedirs(secrets_dir)
        print(f"‚úÖ Created {secrets_dir} directory")
    
    # Check if secrets file already exists
    if os.path.exists(secrets_file):
        print(f"‚ö†Ô∏è  {secrets_file} already exists")
        overwrite = input("Do you want to overwrite it? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled.")
            return False
    
    # Get API key from user
    print("\nüîë Gemini API Key Setup")
    print("=" * 40)
    print("1. Go to: https://makersuite.google.com/app/apikey")
    print("2. Create a new API key")
    print("3. Copy the API key\n")
    
    api_key = input("Enter your Gemini API key: ").strip()
    
    if not api_key:
        print("‚ùå No API key provided. Setup cancelled.")
        return False
    
    if len(api_key) < 20:
        print("‚ö†Ô∏è  API key seems too short. Please check and try again.")
        return False
    
    # Create secrets.toml file
    secrets_content = f'''# Streamlit Secrets Configuration
# Generated by setup.py

GEMINI_API_KEY = "{api_key}"

# This file is automatically ignored by git for security
# Never share or commit this file!
'''
    
    try:
        with open(secrets_file, 'w') as f:
            f.write(secrets_content)
        print(f"‚úÖ Created {secrets_file}")
        print("‚úÖ API key configured successfully!")
        return True
    except Exception as e:
        print(f"‚ùå Error creating secrets file: {e}")
        return False

def verify_setup():
    """Verify that the setup is working"""
    print("\nüß™ Verifying setup...")
    
    try:
        import streamlit as st
        print("‚úÖ Streamlit available")
    except ImportError:
        print("‚ùå Streamlit not installed. Run: pip install -r requirements.txt")
        return False
    
    try:
        import google.generativeai as genai
        print("‚úÖ Google Generative AI available")
    except ImportError:
        print("‚ùå Google Generative AI not installed. Run: pip install -r requirements.txt")
        return False
    
    # Check for API key
    secrets_file = os.path.join(".streamlit", "secrets.toml")
    if os.path.exists(secrets_file):
        print("‚úÖ Secrets file exists")
    else:
        env_key = os.getenv("GEMINI_API_KEY")
        if env_key:
            print("‚úÖ API key found in environment variables")
        else:
            print("‚ö†Ô∏è  API key not configured")
            return False
    
    print("‚úÖ Setup verification complete!")
    return True

def main():
    print("üöÄ Virtual Dress Try-On Application Setup")
    print("=" * 50)
    
    # Check if running in correct directory
    if not os.path.exists("app.py"):
        print("‚ùå Please run this script from the project root directory")
        print("   (The directory containing app.py)")
        sys.exit(1)
    
    print("This script will help you configure the Gemini API key securely.\n")
    
    # Setup API key
    if create_secrets_file():
        print("\nüéâ API key setup complete!")
    else:
        print("\n‚ùå Setup failed. Please try again.")
        sys.exit(1)
    
    # Verify setup
    if verify_setup():
        print("\nüöÄ Ready to run!")
        print("Start the application with: streamlit run app.py")
    else:
        print("\n‚ö†Ô∏è  Setup issues detected. Please check the requirements.")

if __name__ == "__main__":
    main()